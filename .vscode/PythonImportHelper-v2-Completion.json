[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Environment",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "FileSystemLoader",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "StrictUndefined",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "isExtraImport": true,
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "get_templates_names",
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "isExtraImport": true,
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.node",
        "description": "src.node",
        "isExtraImport": true,
        "detail": "src.node",
        "documentation": {}
    },
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "parse_xml_file",
        "importPath": "src.parser",
        "description": "src.parser",
        "isExtraImport": true,
        "detail": "src.parser",
        "documentation": {}
    },
    {
        "label": "build_infrastructure",
        "importPath": "src.build",
        "description": "src.build",
        "isExtraImport": true,
        "detail": "src.build",
        "documentation": {}
    },
    {
        "label": "get_templates_names",
        "kind": 2,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "def get_templates_names(template_folder: str) -> set[str]:\n    \"\"\"\n    Retourne un ensemble contenant les noms des fichiers templates (sans l'extension .jinja).\n    \"\"\"\n    folder_path = os.path.join(TEMPLATES_DIR, template_folder)\n    if not os.path.exists(folder_path):\n        raise FileNotFoundError(f\"Le dossier '{folder_path}' n'existe pas.\")\n    templates_names = set()\n    for filename in os.listdir(folder_path):\n        if filename.endswith('.jinja'):",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "get_template",
        "kind": 2,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "def get_template(template_folder: str, template_name: str, params: dict) -> str:\n    \"\"\"\n    Charge et rend un template avec les paramètres fournis.\n    \"\"\"\n    try:\n        template = env.get_template(f\"{template_folder}/{template_name}.jinja\")\n        return template.render(**params)\n    except Exception as e:\n        raise RuntimeError(f\"Erreur lors du rendu du template '{template_folder}/{template_name}.jinja' : {e}\")\n# def create_template(file_name: str, content: str = \"\"):",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "BASE_DIR = os.path.dirname(__file__)\nTEMPLATES_DIR = os.path.join(BASE_DIR, \"templates\")\nMACROS_DIR = os.path.join(BASE_DIR, \"macros\")\n# Ensure the templates directory exists\nos.makedirs(TEMPLATES_DIR, exist_ok=True)\nos.makedirs(MACROS_DIR, exist_ok=True)\n# Création de l'environnement Jinja2\nenv = Environment(\n    loader=FileSystemLoader([TEMPLATES_DIR, MACROS_DIR]),\n    autoescape=True,  # Active l'échappement automatique (utile pour HTML)",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "TEMPLATES_DIR",
        "kind": 5,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "TEMPLATES_DIR = os.path.join(BASE_DIR, \"templates\")\nMACROS_DIR = os.path.join(BASE_DIR, \"macros\")\n# Ensure the templates directory exists\nos.makedirs(TEMPLATES_DIR, exist_ok=True)\nos.makedirs(MACROS_DIR, exist_ok=True)\n# Création de l'environnement Jinja2\nenv = Environment(\n    loader=FileSystemLoader([TEMPLATES_DIR, MACROS_DIR]),\n    autoescape=True,  # Active l'échappement automatique (utile pour HTML)\n    undefined=StrictUndefined  # Lève une erreur si une variable est manquante",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "MACROS_DIR",
        "kind": 5,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "MACROS_DIR = os.path.join(BASE_DIR, \"macros\")\n# Ensure the templates directory exists\nos.makedirs(TEMPLATES_DIR, exist_ok=True)\nos.makedirs(MACROS_DIR, exist_ok=True)\n# Création de l'environnement Jinja2\nenv = Environment(\n    loader=FileSystemLoader([TEMPLATES_DIR, MACROS_DIR]),\n    autoescape=True,  # Active l'échappement automatique (utile pour HTML)\n    undefined=StrictUndefined  # Lève une erreur si une variable est manquante\n)",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "env = Environment(\n    loader=FileSystemLoader([TEMPLATES_DIR, MACROS_DIR]),\n    autoescape=True,  # Active l'échappement automatique (utile pour HTML)\n    undefined=StrictUndefined  # Lève une erreur si une variable est manquante\n)\ndef get_templates_names(template_folder: str) -> set[str]:\n    \"\"\"\n    Retourne un ensemble contenant les noms des fichiers templates (sans l'extension .jinja).\n    \"\"\"\n    folder_path = os.path.join(TEMPLATES_DIR, template_folder)",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "create_structure",
        "kind": 2,
        "importPath": "src.build",
        "description": "src.build",
        "peekOfCode": "def create_structure(base_path, structure):\n    \"\"\"\n    Crée une arborescence de répertoires et fichiers à partir de la structure donnée.\n    :param base_path: Répertoire de base pour créer l'arborescence.\n    :param structure: Liste des éléments à créer (répertoires ou fichiers).\n    \"\"\"\n    for item in structure:\n        item_path = os.path.join(base_path, item['name'])\n        if item['type'] == 'directory':\n            # Créer un répertoire",
        "detail": "src.build",
        "documentation": {}
    },
    {
        "label": "build_infrastructure",
        "kind": 2,
        "importPath": "src.build",
        "description": "src.build",
        "peekOfCode": "def build_infrastructure(config_file):\n    try:\n        # Charger le fichier YAML\n        with open(config_file, \"r\") as f:\n            config = yaml.safe_load(f)\n        # Récupérer les informations principales\n        project_name = config['project_name']\n        output_dir = config['output_dir']\n        structure = config['structure']\n        # Chemin de base",
        "detail": "src.build",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "src.node",
        "description": "src.node",
        "peekOfCode": "class Node:\n    def __init__(self, tag: str, children: Optional[List[\"Node\"]]=None, **args):\n        \"\"\"\n        Initialise un nœud avec un tag, un template, des enfants, et des arguments supplémentaires.\n        :param tag: Le nom de la balise.\n        :param template: Le contenu du template (string).\n        :param children: Une liste de nœuds enfants (par défaut, vide).\n        :param args: Autres arguments passés pour le rendu du template.\n        \"\"\"\n        self.tag = tag",
        "detail": "src.node",
        "documentation": {}
    },
    {
        "label": "rec_xml_parser",
        "kind": 2,
        "importPath": "src.parser",
        "description": "src.parser",
        "peekOfCode": "def rec_xml_parser(xml_node):\n    \"\"\"\n    Recursively parses an XML node and its children, returning a Node object\n    that renders itself and its children.\n    :param xml_node: The current XML element.\n    :return: A Node object representing the current XML element and its children.\n    \"\"\"\n    children = [rec_xml_parser(child) for child in xml_node]\n    # Récupérer le contenu textuel s'il existe (en supprimant les espaces inutiles)\n    text_content = xml_node.text.strip() if xml_node.text and xml_node.text.strip() else None",
        "detail": "src.parser",
        "documentation": {}
    },
    {
        "label": "parse_xml_file",
        "kind": 2,
        "importPath": "src.parser",
        "description": "src.parser",
        "peekOfCode": "def parse_xml_file(xml_tree_root: ET.Element, type:str, output_file=OUTPUT_XML_FILE):\n    \"\"\"\n    Parse an XML file and consolidate all rendered content into a single XML file.\n    :param xml_file_path: Path to the XML file to parse.\n    :param type: type de compilation du noeud root.\n    :param output_file: Path to the consolidated output XML file.\n    \"\"\"\n    # Start the recursive parsing process\n    root_node = rec_xml_parser(xml_tree_root)\n    # Render the entire tree starting from the root node",
        "detail": "src.parser",
        "documentation": {}
    },
    {
        "label": "OUTPUT_XML_FILE",
        "kind": 5,
        "importPath": "src.parser",
        "description": "src.parser",
        "peekOfCode": "OUTPUT_XML_FILE = os.path.join(\"output\",\"consolidated_output.xml\")\n# Ensure the output directory exists\nos.makedirs(os.path.dirname(OUTPUT_XML_FILE), exist_ok=True)\ndef rec_xml_parser(xml_node):\n    \"\"\"\n    Recursively parses an XML node and its children, returning a Node object\n    that renders itself and its children.\n    :param xml_node: The current XML element.\n    :return: A Node object representing the current XML element and its children.\n    \"\"\"",
        "detail": "src.parser",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def cli():\n    \"\"\"\n    CLI pour la gestion des templates et des projets.\n    \"\"\"\n    pass\n@cli.command()\n@click.argument(\"input_file\", type=click.Path(exists=True), default=\"main.xml\")\n@click.option(\"--type\", \"-t\", type=str, default=\"default\", help=\"Choix du type de compilation du premier noeud\")\n@click.option(\"--output-dir\", \"-o\", type=click.Path(), default=INFRASTRUCTURE, help=\"Répertoire de sortie pour les fichiers générés.\")\ndef compile(input_file, type, output_dir):",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def compile(input_file, type, output_dir):\n    \"\"\"\n    Traite un fichier XML et génère des fichiers à partir de templates.\n    Arguments :\n        INPUT_FILE : Le fichier XML à traiter (par défaut : main.xml).\n    Options :\n        --type, -t : Choix du type de compilation du premier noeud (par défaut : 'default').\n        --output-dir, -o : Répertoire de sortie pour les fichiers générés (par défaut : 'output').\n    \"\"\"\n    click.echo(f\"Processing XML file: {input_file}\")",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "build",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def build(config_file):\n    \"\"\"\n    Génère une arborescence de projet à partir d'un fichier YAML.\n    Options :\n        --config-file, -c : Fichier YAML décrivant la structure du projet (par défaut : 'infrastructure.yml').\n    \"\"\"\n    click.echo(f\"Loading configuration from: {config_file}\")\n    build_infrastructure(config_file)\nif __name__ == \"__main__\":\n    cli()",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "INFRASTRUCTURE",
        "kind": 5,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "INFRASTRUCTURE = os.path.join(\"output\",\"infrastructure.yml\")\n@click.group()\ndef cli():\n    \"\"\"\n    CLI pour la gestion des templates et des projets.\n    \"\"\"\n    pass\n@cli.command()\n@click.argument(\"input_file\", type=click.Path(exists=True), default=\"main.xml\")\n@click.option(\"--type\", \"-t\", type=str, default=\"default\", help=\"Choix du type de compilation du premier noeud\")",
        "detail": "cli",
        "documentation": {}
    }
]