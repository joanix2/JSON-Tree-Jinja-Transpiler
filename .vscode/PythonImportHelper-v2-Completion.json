[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Environment",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "FileSystemLoader",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "StrictUndefined",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "isExtraImport": true,
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "get_templates_names",
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "isExtraImport": true,
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.node",
        "description": "src.node",
        "isExtraImport": true,
        "detail": "src.node",
        "documentation": {}
    },
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "xml_to_dict",
        "importPath": "src.converter",
        "description": "src.converter",
        "isExtraImport": true,
        "detail": "src.converter",
        "documentation": {}
    },
    {
        "label": "parse_json_file",
        "importPath": "src.parser",
        "description": "src.parser",
        "isExtraImport": true,
        "detail": "src.parser",
        "documentation": {}
    },
    {
        "label": "build_infrastructure",
        "importPath": "src.build",
        "description": "src.build",
        "isExtraImport": true,
        "detail": "src.build",
        "documentation": {}
    },
    {
        "label": "get_templates_names",
        "kind": 2,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "def get_templates_names(template_folder: str) -> set[str]:\n    \"\"\"\n    Retourne un ensemble contenant les noms des fichiers templates (sans l'extension .jinja).\n    \"\"\"\n    folder_path = os.path.join(TEMPLATES_DIR, template_folder)\n    if not os.path.exists(folder_path):\n        raise FileNotFoundError(f\"Le dossier '{folder_path}' n'existe pas.\")\n    templates_names = set()\n    for filename in os.listdir(folder_path):\n        if filename.endswith('.jinja'):",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "get_template",
        "kind": 2,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "def get_template(template_folder: str, template_name: str, params: dict) -> str:\n    \"\"\"\n    Charge et rend un template avec les paramètres fournis.\n    \"\"\"\n    try:\n        template = env.get_template(f\"{template_folder}/{template_name}.jinja\")\n        return template.render(**params)\n    except Exception as e:\n        raise RuntimeError(f\"Erreur lors du rendu du template '{template_folder}/{template_name}.jinja' : {e}\")\n# def create_template(file_name: str, content: str = \"\"):",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "BASE_DIR = os.path.dirname(__file__)\nTEMPLATES_DIR = os.path.join(BASE_DIR, \"templates\")\nMACROS_DIR = os.path.join(BASE_DIR, \"macros\")\n# Ensure the templates directory exists\nos.makedirs(TEMPLATES_DIR, exist_ok=True)\nos.makedirs(MACROS_DIR, exist_ok=True)\n# Création de l'environnement Jinja2\nenv = Environment(\n    loader=FileSystemLoader([TEMPLATES_DIR, MACROS_DIR]),\n    undefined=StrictUndefined  # Lève une erreur si une variable est manquante",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "TEMPLATES_DIR",
        "kind": 5,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "TEMPLATES_DIR = os.path.join(BASE_DIR, \"templates\")\nMACROS_DIR = os.path.join(BASE_DIR, \"macros\")\n# Ensure the templates directory exists\nos.makedirs(TEMPLATES_DIR, exist_ok=True)\nos.makedirs(MACROS_DIR, exist_ok=True)\n# Création de l'environnement Jinja2\nenv = Environment(\n    loader=FileSystemLoader([TEMPLATES_DIR, MACROS_DIR]),\n    undefined=StrictUndefined  # Lève une erreur si une variable est manquante\n)",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "MACROS_DIR",
        "kind": 5,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "MACROS_DIR = os.path.join(BASE_DIR, \"macros\")\n# Ensure the templates directory exists\nos.makedirs(TEMPLATES_DIR, exist_ok=True)\nos.makedirs(MACROS_DIR, exist_ok=True)\n# Création de l'environnement Jinja2\nenv = Environment(\n    loader=FileSystemLoader([TEMPLATES_DIR, MACROS_DIR]),\n    undefined=StrictUndefined  # Lève une erreur si une variable est manquante\n)\ndef get_templates_names(template_folder: str) -> set[str]:",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "src.jinja.template_services",
        "description": "src.jinja.template_services",
        "peekOfCode": "env = Environment(\n    loader=FileSystemLoader([TEMPLATES_DIR, MACROS_DIR]),\n    undefined=StrictUndefined  # Lève une erreur si une variable est manquante\n)\ndef get_templates_names(template_folder: str) -> set[str]:\n    \"\"\"\n    Retourne un ensemble contenant les noms des fichiers templates (sans l'extension .jinja).\n    \"\"\"\n    folder_path = os.path.join(TEMPLATES_DIR, template_folder)\n    if not os.path.exists(folder_path):",
        "detail": "src.jinja.template_services",
        "documentation": {}
    },
    {
        "label": "create_structure",
        "kind": 2,
        "importPath": "src.build",
        "description": "src.build",
        "peekOfCode": "def create_structure(base_path, structure):\n    \"\"\"\n    Crée une arborescence de répertoires et fichiers à partir de la structure donnée.\n    :param base_path: Répertoire de base pour créer l'arborescence.\n    :param structure: Liste des éléments à créer (répertoires ou fichiers).\n    \"\"\"\n    for item in structure:\n        item_path = os.path.join(base_path, item['name'])\n        if item['type'] == 'directory':\n            # Créer un répertoire",
        "detail": "src.build",
        "documentation": {}
    },
    {
        "label": "build_infrastructure",
        "kind": 2,
        "importPath": "src.build",
        "description": "src.build",
        "peekOfCode": "def build_infrastructure(config_file):\n    try:\n        # Charger le fichier YAML\n        with open(config_file, \"r\") as f:\n            config = yaml.safe_load(f)\n        # Récupérer les informations principales\n        project_name = config['project_name']\n        output_dir = config['output_dir']\n        structure = config['structure']\n        # Chemin de base",
        "detail": "src.build",
        "documentation": {}
    },
    {
        "label": "safe_convert_json",
        "kind": 2,
        "importPath": "src.converter",
        "description": "src.converter",
        "peekOfCode": "def safe_convert_json(value):\n    \"\"\"Tente de convertir une chaîne en JSON natif.\"\"\"\n    try:\n        return json.loads(value)\n    except (json.JSONDecodeError, TypeError):\n        return value\ndef xml_to_dict(element):\n    \"\"\"Convertit un élément XML en un dictionnaire JSON structuré.\"\"\"\n    node = {\"tag\": element.tag}\n    # Ajoute les attributs s'ils existent",
        "detail": "src.converter",
        "documentation": {}
    },
    {
        "label": "xml_to_dict",
        "kind": 2,
        "importPath": "src.converter",
        "description": "src.converter",
        "peekOfCode": "def xml_to_dict(element):\n    \"\"\"Convertit un élément XML en un dictionnaire JSON structuré.\"\"\"\n    node = {\"tag\": element.tag}\n    # Ajoute les attributs s'ils existent\n    if element.attrib:\n        node[\"attributes\"] = {k : safe_convert_json(v) for k, v in element.attrib.items()}\n    # Ajoute les enfants récursivement\n    children = [xml_to_dict(child) for child in element]\n    if children:\n        node[\"children\"] = children",
        "detail": "src.converter",
        "documentation": {}
    },
    {
        "label": "convert_xml_to_json",
        "kind": 2,
        "importPath": "src.converter",
        "description": "src.converter",
        "peekOfCode": "def convert_xml_to_json(xml_file, json_file):\n    \"\"\"Convertit un fichier XML en fichier JSON.\"\"\"\n    tree = ET.parse(xml_file)\n    root = tree.getroot()\n    json_data = xml_to_dict(root)\n    with open(json_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(json_data, f, indent=4, ensure_ascii=False)\n    print(f\"Conversion terminée. Résultat enregistré dans {json_file}\")",
        "detail": "src.converter",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "src.node",
        "description": "src.node",
        "peekOfCode": "class Node:\n    def __init__(self, tag: str, children: Optional[List[\"Node\"]]=None, **args):\n        \"\"\"\n        Initialise un nœud avec un tag, un template, des enfants, et des arguments supplémentaires.\n        :param tag: Le nom de la balise.\n        :param template: Le contenu du template (string).\n        :param children: Une liste de nœuds enfants (par défaut, vide).\n        :param args: Autres arguments passés pour le rendu du template.\n        \"\"\"\n        self.tag = tag",
        "detail": "src.node",
        "documentation": {}
    },
    {
        "label": "rec_json_parser",
        "kind": 2,
        "importPath": "src.parser",
        "description": "src.parser",
        "peekOfCode": "def rec_json_parser(json_node):\n    \"\"\"\n    Analyse récursivement un nœud JSON et ses enfants, retournant un objet Node\n    qui se rend lui-même et ses enfants.\n    :param json_node: Le nœud JSON actuel sous forme de dictionnaire.\n    :return: Un objet Node représentant l'élément JSON et ses enfants.\n    \"\"\"\n    # Récupérer le tag du nœud\n    tag = json_node.get(\"tag\", \"unknown\")\n    # Récupérer les enfants s'ils existent",
        "detail": "src.parser",
        "documentation": {}
    },
    {
        "label": "parse_json_file",
        "kind": 2,
        "importPath": "src.parser",
        "description": "src.parser",
        "peekOfCode": "def parse_json_file(json_tree_root, type, output_file=INFRASTRUCTURE):\n    \"\"\"\n    Parse un fichier JSON et consolide tout le contenu rendu dans un seul fichier JSON.\n    :param json_tree_root: Dictionnaire JSON représentant la racine du fichier JSON.\n    :param type: Type de compilation du nœud root.\n    :param output_file: Fichier de sortie YAML.\n    \"\"\"\n    # Démarrer le processus de parsing récursif\n    root_node = rec_json_parser(json_tree_root)\n    # Rendre l'arbre entier à partir du nœud racine",
        "detail": "src.parser",
        "documentation": {}
    },
    {
        "label": "INFRASTRUCTURE",
        "kind": 5,
        "importPath": "src.parser",
        "description": "src.parser",
        "peekOfCode": "INFRASTRUCTURE = os.path.join(\"output\",\"infrastructure.yml\")\n# S'assurer que le répertoire de sortie existe\nos.makedirs(os.path.dirname(INFRASTRUCTURE), exist_ok=True)\ndef rec_json_parser(json_node):\n    \"\"\"\n    Analyse récursivement un nœud JSON et ses enfants, retournant un objet Node\n    qui se rend lui-même et ses enfants.\n    :param json_node: Le nœud JSON actuel sous forme de dictionnaire.\n    :return: Un objet Node représentant l'élément JSON et ses enfants.\n    \"\"\"",
        "detail": "src.parser",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def cli():\n    \"\"\"\n    CLI pour la gestion des templates et des projets.\n    \"\"\"\n    pass\n@cli.command()\n@click.argument(\"xml_file\", type=click.Path(exists=True), required=True)\n@click.option(\"--json-file\", \"-j\", type=click.Path(), default=None, help=\"Fichier JSON de sortie. Par défaut, même nom que le fichier XML avec extension .json.\")\ndef convert(xml_file, json_file):\n    \"\"\"",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def convert(xml_file, json_file):\n    \"\"\"\n    Convertit un fichier XML en JSON.\n    Options :\n        xml_file : Fichier XML source.\n        --json-file, -j : Fichier JSON de sortie (facultatif).\n                         Par défaut, le JSON aura le même nom et se trouvera dans le même répertoire que le fichier XML.\n    \"\"\"\n    # Déterminer le fichier JSON de sortie par défaut s'il n'est pas fourni\n    if json_file is None:",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def compile(input_file, type, output):\n    \"\"\"\n    Traite un fichier JSON et génère des fichiers à partir de templates.\n    Arguments :\n        INPUT_FILE : Le fichier JSON à traiter (par défaut : main.json).\n    Options :\n        --type, -t : Choix du type de compilation du premier nœud (par défaut : 'default').\n        --output-dir, -o : Répertoire de sortie pour les fichiers générés (par défaut : 'output').\n    \"\"\"\n    click.echo(f\"Processing JSON file: {input_file}\")",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "build",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def build(config_file):\n    \"\"\"\n    Génère une arborescence de projet à partir d'un fichier YAML.\n    Options :\n        --config-file, -c : Fichier YAML décrivant la structure du projet (par défaut : 'infrastructure.yml').\n    \"\"\"\n    click.echo(f\"Loading configuration from: {config_file}\")\n    build_infrastructure(config_file)\n@cli.command()\n@click.argument(\"input_file\", type=click.Path(exists=True), default=\"main.xml\")",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def run(input_file, type, output):\n    \"\"\"\n    Exécute toutes les étapes :\n    1. Vérifie si le fichier est XML ou JSON.\n    2. Convertit le fichier XML en JSON si nécessaire.\n    3. Parse le JSON.\n    4. Si le parsing réussit, génère une arborescence YAML.\n    Arguments :\n        INPUT_FILE : Le fichier XML ou JSON à traiter.\n    Options :",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "INFRASTRUCTURE",
        "kind": 5,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "INFRASTRUCTURE = os.path.join(\"output\",\"infrastructure.yml\")\n@click.group()\ndef cli():\n    \"\"\"\n    CLI pour la gestion des templates et des projets.\n    \"\"\"\n    pass\n@cli.command()\n@click.argument(\"xml_file\", type=click.Path(exists=True), required=True)\n@click.option(\"--json-file\", \"-j\", type=click.Path(), default=None, help=\"Fichier JSON de sortie. Par défaut, même nom que le fichier XML avec extension .json.\")",
        "detail": "cli",
        "documentation": {}
    }
]